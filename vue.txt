2019-1-7 
初步了解vue，
cnpm install - g live-server node的服务器 live-server 执行
渲染字符串 {{message}}
v-if <div v-if="isTrue">if</div> 是否渲染
v-else <div v-else>else</div> 与if配套使用
v-show <div v-show="isShow">show</div> 通过dispaly显示隐藏
v-for <li v-for="item in items">{{item}}</li> 循环 computed 对象 返回 items
computed : {
    sortItems : function(){
        return this.items.sort((a, b) => a - b);
    }
}

2019-1-8
v-text 渲染文字
v-html 渲染html （不推荐使用）
v-on 绑定事件<button v-on:click="clickFun">按钮</button> app中添加methods属性，methods:{clickFun:function(){事件}}
v-model 数据源绑定 双向绑定实现 修饰符：.lazy 像失去焦点事件 .number 内容为数字 .trim 内容去空格 
<input type="checkbox" v-model="isTrue"> 单个复选框选中
<input type="checkbox" value="a" v-model="names"><input type="checkbox" value="b" v-model="names"> 多个复选框 names为一个数组
<input type="radio" value="男" v-model="sex"><input type="radio" value="女" v-model="sex"> 单选框

2019-1-9
v-bind 绑定元素的属性<div v-bind:class="class"> 判断 <div :class={class:isOk}> 对象 <div :style="{obj}"> obj : {coler:"red",fontSize:"12px"}
v-pre 显示原始代码 {{message}}
v-cloak 整个都渲染完才显示
v-once 只显示首次渲染的内容

2019-1-10
Vue.directive 自定义指令 el : 本身绑定的元素 ，binding : 指令的信息对象，有指令的内容之类的 ，vnode : vue生成的虚拟节点
Vue.directive("me", {
    bind:function(el, binding, vnode) {
        //第一次绑定触发
    },
    inserted:function(el, binding, vnode) {
        //插入元素内触发
    }，
    update:function(el, binding, vnode) {
        //组件更新时触发
    }，
    componentUpdated:function(el, binding, vnode) {
        //组件后新时触发
    },
    unbind:function(el, binding, vnode) {
        //解除绑定时触发
    }
})
Vue.extend 拓展实例构造器 没搞明白，像静态的自定义组件一样
var meExtend = Vue.extend({
    template : "<p><a :href="url">{{name}}</a></p>",
    data : function (){
        return {
            url : "http://www.baidu.com",
            name : "百度"
        }
    }
})
new meExtend().$mount("#baidu");
Vue.set 全局操作方法 给参数重新赋值之类的 在构造器引用外部数据时，如果数据时array，通过下标修改array的内容，vue就无法监听到内容的改变，
就无法将数据渲染到页面上去，这时就需要Vue.set方法了 Vue.set(app.data, 1, "dddd"); 变量，下标，内容 Vue.set(app, "count", 2) vue对象，参数名，内容
Vue生命周期 beforCreate 初始化之前 created 初始化之后 beforMount 挂载到元素之前 mounted 挂载到元素之后 beforUpdate 更新数据之前 updated 更新数据之后 
beforDesTroy 销毁之前 destoryed 销毁之后 

2019-1-12
template 定义模板 可以认为是替换挂载元素 也可以说是基础组件 多种方式定义 定义到初始化中new Vue({el:"#app", template : `<h2>1</h2>`})，定义到
template标签中 <template id="t1"><h2>1</h2></template> new Vue({el:"#app", template : "#t1"})，定义到srcipt中 <srcipt type="x-template" id="t2"></srcipt>
new Vue({el:"#app", template : "#t2"}) 注意type="x-template";

component 自定义组件（自定义标签）定义全局组件 Vue.component("my-tag", {template:`<div>1</div>`}) 定义局部组件实例化中选项components
components : {"my-app-tag" : {template : `<div>2</div>`}} 注意 组件名中最好不要有大写，大写会转成小写标签，components中 定义的要带引号，
否则会不成功

component props 属性设置 <my-tag name="技术"></my-tag> 
components : {
    "my-app-tag" : {
        template : `<div>这是{{name}}</div>`,
        props : ["name"]
        }
    }
也可以动态设置属性内容，使用v-bind 指令就可以，注意 vue不支持"-"，最好避免，使用"-"是用小驼峰的写法表示 "my-name" -> "myName"

component 父子组件使用 记住伦理关系，
var author = {
    template : `<p>来自百度</p>`
}

var mytag = {
    template: `
        <div>
            <p>你好啊，{{name}}</p>
            <author></author>
        </div>
    `,
    props:["name"],
    components : {
        "author" : author
    }

}
var app = new Vue({
    el: "#app",
    components: {
        "mytag" : mytag
    }
})

component标签 <component></component> 是用来动态显示自定义标签的，通过is属性来选择显示哪一个标签is="componentA"，这个属性也可以绑定v-bind:is="who"

2019-1-13
propsData 拓展传参 在实例化拓展时传递参数 new header_a({propsData:{a:1}}),a为参数名，1位参数，extend中需要props:["a"]来接收参数，在extend构造器中用this.a就可得到，也可以中{{a}}显示原始
computed 计算选项 在显示数据时计算，必须数据是100，但显示￥100元，不改变原始数据 computed : {newPrice:function(){return "￥" + this.price + "元"}}
methods 方法选项 @click="add(1, $event)" methods : {add:function (num, event) {this.price++}} 传参，$event 是鼠标的event参数 .native 修饰符 @click.native="add" 调用原生的add 在作用域外调用方法app.add()
watch 监听选项 监听某个变量的该表 在构造器内实现watch : {count:function(newVal, oldVal){console.log(newVal)}} 在构造器外部实现 app.$watch("count", function(newVal, oldVal){console.log(newVal)})
mixins 混入选项 不改变构造器结构 混入新的方法 构造器混入 mixins : {updated : function (){console.log("1")}} 全局混入Vue.mixin({updated : function (){console.log("2")}) 顺序 全局混入>局部混入>原生
extends 拓展选项 与混入选项差不多 var extendObj = {updated : function (){console.log(1)}} 构造器中 extends: extendObj 注意 这是对象，不是数组，如果拓展相同的方法 只会执行原始的方法，拓展的方法无效果，混入也是这样 顺序 拓展>原生
delimiters 改变插值的形式 原始是{{name}} 构造器中 delimiters:["${", "}"] 变成${name} 

2019-1-16
调用jq方法很简单，直接用就行，外部调用方法 app.add() 即可 app实例 add() 方法
实例 extend $mount 挂载 $destroy 卸载 $forceUpdate 更新 $nextTick 数据修改

2019-1-20
绑定事件 app.$on("方法名", fucntion (){}), 只绑定只一次事件 app.$once("方法名", function () {}), 外部调用事件 app.$emit("方法名"), 解除绑定事件 app.$off("方法名")，注意，只能用于拓展方法，app内使用v-on:click="jian" 就无效了
slot 组件中更加方便的数据传输  传递<span slot="name">{{blogData.name}}</span>  接收<slot name="name"></slot>